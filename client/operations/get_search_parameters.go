package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*GetSearchParams contains all the parameters to send to the API endpoint
for the get search operation typically these are written to a http.Request
*/
type GetSearchParams struct {

	/*Expand
	  A comma-separated list of the parameters to expand

	*/
	Expand string
	/*Fields
	  The list of fields to return for each issue. By default, all navigable fields are returned

	*/
	Fields string
	/*Jql*/
	Jql string
	/*MaxResults
	  The maximum number of issues to return (defaults to 50). The maximum allowable value is dictated by the JIRA property 'jira.search.views.default.max'. If you specify a value that is higher than this number, your search results will be truncated.

	*/
	MaxResults int64
	/*StartAt
	  the index of the first issue to return (0-based)

	*/
	StartAt int64
}

// WriteToRequest writes these params to a swagger request
func (o *GetSearchParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	// query param expand
	if err := r.SetQueryParam("expand", o.Expand); err != nil {
		return err
	}

	// query param fields
	if err := r.SetQueryParam("fields", o.Fields); err != nil {
		return err
	}

	// query param jql
	if err := r.SetQueryParam("jql", o.Jql); err != nil {
		return err
	}

	// query param maxResults
	if err := r.SetQueryParam("maxResults", swag.FormatInt64(o.MaxResults)); err != nil {
		return err
	}

	// query param startAt
	if err := r.SetQueryParam("startAt", swag.FormatInt64(o.StartAt)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
